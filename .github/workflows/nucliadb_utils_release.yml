name: Release NucliaDB Utils

on:
  workflow_run:
    workflows: [Release NucliaDB Protos]
    types:
      - completed

jobs:
  build:
    name: Build ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
            interpreter: 3.7 3.8 3.9 3.10
          # - os: windows
          #   ls: dir
          #   target: i686
          #   python-architecture: x86
          #   interpreter: 3.7 3.8 3.9 3.10
          - os: macos
            target: aarch64
            interpreter: 3.7 3.8 3.9 3.10
          # - os: ubuntu
          #   platform: linux
          #   target: i686
          # GCC 4.8.5 in manylinux2014 container doesn't support c11 atomic
          # we use manylinux_2_24 container for aarch64 and armv7 targets instead,
          - os: ubuntu
            platform: linux
            target: aarch64
            container: messense/manylinux_2_24-cross:aarch64
          # - os: ubuntu
          #   platform: linux
          #   target: armv7
          #   container: messense/manylinux_2_24-cross:armv7
          #   interpreter: 3.7 3.8 3.9 3.10
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1
        exclude:
          # Windows on arm64 only supports Python 3.11+
          - os: windows
            target: aarch64

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - run: pip install -U twine wheel 'black>=22.3.0,<23' typing_extensions

      - run: python bump.py --build=${{github.run_number}}

      - run: cd nucliadb_utils; python setup.py sdist -d ../dist/; cd ..

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.10.2

      - name: Build wheels
        if: ${{ matrix.os != 'windows'}}
        run: python -m cibuildwheel --output-dir dist ./nucliadb_utils

      - name: Build wheels
        if: ${{ matrix.os == 'windows'}}
        run: pip wheel ./nucliadb_utils --no-deps -w dist

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: twine check dist/*

      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  list-pypi-files:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: ls -lh dist/
      - run: echo "`ls dist | wc -l` files"

  release:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: python bump.py --build=${{github.run_number}}
      - run: pip install -U twine

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
