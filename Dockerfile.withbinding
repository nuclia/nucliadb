#
# This Dockerfile build nucliadb with the binding.
# It's a copy of `Dockerfile` adding the additional `python_rust` stage.
#

#
# Stage to build nidx_binding (with Rust)
#
FROM python:3.12 AS python_rust

ARG RUST_BUILD_PROFILE=release

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH

COPY rust-toolchain.toml /tmp

WORKDIR /tmp

RUN set -eux; \
    dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
    amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='3dc5ef50861ee18657f9db2eeb7392f9c2a6c95c90ab41e45ab4ca71476b4338' ;; \
    armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='67777ac3bc17277102f2ed73fd5f14c51f4ca5963adadf7f174adf4ebc38747b' ;; \
    arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='32a1532f7cef072a667bac53f1a5542c99666c4071af0c9549795bbdb2069ec1' ;; \
    i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='e50d1deb99048bc5782a0200aa33e4eea70747d49dffdc9d06812fd22a372515' ;; \
    *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; \
    esac; \
    rustVersion=$(awk -F '=' '/channel/ {print $2}' rust-toolchain.toml | tr -d '" '); \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain ${rustVersion} --default-host ${rustArch}; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
    rustup --version; \
    cargo --version; \
    rustc --version;

RUN apt update && apt install -y protobuf-compiler
RUN pip install maturin

COPY . /nucliadb

WORKDIR /nucliadb

RUN set -eux; \
    cd nidx/nidx_binding; \
    maturin build --profile ${RUST_BUILD_PROFILE}


# Stage to extract the external requirements from the lockfile
# This is to improve caching, `pdm.lock` changes when our components
# are updated. The generated requirements.txt does not, so it is
# more cacheable.
FROM python:3.12-slim-bookworm AS requirements
RUN pip install pdm>=2.22.3
COPY pdm.lock pyproject.toml .
RUN pdm export -G nucliadb --no-hashes | grep -v ^-e | grep -v nidx_protos > requirements.lock.txt

#
# This stage builds a virtual env with all dependencies
#
FROM python:3.12-slim-bookworm AS builder
RUN pip install pdm>=2.22.3

# Install Python dependencies
WORKDIR /usr/src/app
COPY --from=requirements requirements.lock.txt /tmp
RUN python -m venv /app && /app/bin/pip install -r /tmp/requirements.lock.txt

# Copy application
COPY VERSION pyproject.toml pdm.lock /usr/src/app
COPY nucliadb_utils /usr/src/app/nucliadb_utils
COPY nucliadb_telemetry /usr/src/app/nucliadb_telemetry
COPY nucliadb_protos /usr/src/app/nucliadb_protos
COPY nucliadb_models /usr/src/app/nucliadb_models
COPY nucliadb /usr/src/app/nucliadb
COPY nidx /usr/src/app/nidx

# Install our packages to the virtualenv
RUN pdm use -f /app && pdm sync -G nucliadb --no-editable

# make sure to install the built wheel after so it is installed no matter what
COPY --from=python_rust /nucliadb/nidx/target/wheels/ /wheels/
RUN /app/bin/pip install /wheels/*.whl --force

#
# This is the main image, it just copies the virtual env into the base image
#
FROM python:3.12-slim-bookworm
COPY --from=builder /app /app
RUN mkdir -p /data

ENV NUA_ZONE=europe-1
ENV NUA_API_KEY=
ENV NUCLIA_PUBLIC_URL=https://{zone}.nuclia.cloud
ENV PYTHONUNBUFFERED=1
ENV DRIVER=LOCAL
ENV HTTP_PORT=8080
ENV INGEST_GRPC_PORT=8060
ENV TRAIN_GRPC_PORT=8040
ENV LOG_OUTPUT_TYPE=stdout

# HTTP
EXPOSE 8080/tcp
# GRPC - INGEST
EXPOSE 8060/tcp
# GRPC - TRAIN
EXPOSE 8040/tcp

ENV PATH="/app/bin:$PATH"
WORKDIR /app
CMD ["nucliadb"]
