# Copyright (C) 2021 Bosutech XXI S.L.
#
# nucliadb is offered under the AGPL v3.0 and as commercial software.
# For commercial licensing, contact us at info@nuclia.com.
#
# AGPL:
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field

from nucliadb_models.common import QuestionAnswers
from nucliadb_models.extracted import FieldMetadata
from nucliadb_models.text import FieldText


class AgentType(Enum):
    graph = "graph"
    label = "label"
    ask = "ask"
    qa = "qa"
    extract = "extract"
    prompt_guard = "prompt_guard"
    llama_guard = "llama_guard"


class AgentsFilter(BaseModel):
    type: AgentType
    task_names: list[str] = Field(
        default_factory=list,
        description="list of task names. If None or empty, all tasks for that operation are applied.",
    )


class ResourceAgentsRequest(BaseModel):
    filters: Optional[list[AgentsFilter]] = Field(
        default=None,
        description="Filters to apply to the agents. If None, all curently configured agents are applied.",
    )


class NewTextField(BaseModel):
    text_field: FieldText
    destination: str


class AppliedDataAugmentation(BaseModel):
    qas: Optional[QuestionAnswers] = Field(
        default=None,
        description="Question and answers generated by the Question Answers agent",
    )
    new_text_fields: list[NewTextField] = Field(
        default_factory=list,
        description="New text fields. Only generated by the Generator agent as of now.",
    )
    changed: bool = Field(
        default=True,
        description="Indicates if the FieldMetadata was changed by the agents",
    )


class AugmentedField(BaseModel):
    metadata: FieldMetadata = Field(
        ...,
        title="The updated metadata of the field",
    )
    applied_data_augmentation: AppliedDataAugmentation = Field(
        ..., title="The results of the Applied Data Augmentation"
    )
    input_nuclia_tokens: float = Field(
        ..., title="The number of input Nuclia tokens consumed for the field"
    )
    output_nuclia_tokens: float = Field(
        ..., title="The number of output Nuclia tokens consumed for the field"
    )
    time: float = Field(..., title="The time taken to execute the Data Augmentation agents to the field")


class ResourceAgentsResponse(BaseModel):
    results: dict[str, AugmentedField] = Field(
        ...,
        title="Pairs of augmented FieldMetadata and Data Augmentation results by field id",
    )
