name: nucliadb Node (rust + python)

on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_node.yml"
      - "charts/nucliadb_node/**"
      - "Dockerfile.node"
      - "Dockerfile.node_sidecar"
      - "Cargo.lock"
      - "Cargo.toml"
      - "nucliadb_node/**"
      - "nucliadb_vectors/**"
      - "nucliadb_swim/src/**"
      - "nucliadb_cluster/src/**"
      - "nucliadb_telemetry/src/**"
      - "nucliadb_utils/**"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_node.yml"
      - "charts/nucliadb_node/**"
      - "Dockerfile.node"
      - "Dockerfile.node_sidecar"
      - "Cargo.lock"
      - "Cargo.toml"
      - "nucliadb_node/**"
      - "nucliadb_vectors/**"
      - "nucliadb_swim/src/**"
      - "nucliadb_cluster/src/**"
      - "nucliadb_telemetry/src/**"
      - "nucliadb_utils/**"

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  API_VERSION: 1
  COMPONENT: nucliadb-node
  CONTAINER_REGISTRY: eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME_NODE: node
  IMAGE_NAME_NODE_SIDECAR: node_sidecar
  HASH: $(git rev-parse --short "$GITHUB_SHA")
  BRANCH: ${GITHUB_REF##*/}

jobs:
  pre-checks-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install package
        run: |
          pip install -r code-requirements.txt
      - name: Run pre-checks
        run: |
          flake8 nucliadb_node --config=nucliadb_node/setup.cfg
          isort -c --profile black nucliadb_node/
          black --check --verbose nucliadb_node

  licenses:
    name: Check Licenses
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        name: cargo deny
        with:
          log-level: warn
          command: check licenses

  format-rust:
    name: Code Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: rustfmt
        run: cargo +nightly fmt -p nucliadb_node -- --check

  clippy-rust:
    name: Clippy lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.59.0
          profile: default
          override: true

      - uses: actions/checkout@v3

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -p nucliadb_node --tests

  tests-rust:
    name: Tests
    runs-on: ubuntu-latest
    needs: [clippy-rust, format-rust, licenses]

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.59.0
          profile: default
          override: true

      - uses: actions/checkout@v3

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/cargo@v1
        name: cargo test
        with:
          command: test
          args: --all-features --no-fail-fast -p nucliadb_node

  tests-python:
    runs-on: ubuntu-latest
    needs: pre-checks-python

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      # setup docker, as we need to pull the node image to run the tests
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install the package
        run: |
          pip install -r test-requirements.txt
          pip install -r nucliadb_node/requirements-sources.txt
          pip install -r nucliadb_node/requirements.txt
          pip install -e nucliadb_node

      - name: Install rust binding for testing
        run: |
          maturin build -m nucliadb_node/binding/Cargo.toml
          pip install target/wheels/*cp39-cp39-manylinux_2_31_x86_64.whl

      - name: Check mypy
        run: |
          MYPYPATH=./mypy_stubs mypy nucliadb_node/

      - name: Run tests
        run: |
          pytest -rfE --cov=nucliadb_node -s --tb=native -v --cov-report xml --cov-append nucliadb_node/nucliadb_node

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-rust:
    name: Build image and push
    runs-on: ubuntu-latest
    needs: tests-rust
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup gcloud CLI
        uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      # Build docker image
      - name: Image
        run: |-
          docker build -t $CONTAINER_REGISTRY/$IMAGE_NAME_NODE:$HASH . -f Dockerfile.node
      - name: Tag
        run: |-
          docker tag $CONTAINER_REGISTRY/$IMAGE_NAME_NODE:$HASH $CONTAINER_REGISTRY/$IMAGE_NAME_NODE:$BRANCH
      - name: Push sha
        if: github.event_name == 'push'
        run: |-
          docker push $CONTAINER_REGISTRY/$IMAGE_NAME_NODE:$HASH
      - name: Push latest
        if: github.event_name == 'push'
        run: |-
          docker push $CONTAINER_REGISTRY/$IMAGE_NAME_NODE:$BRANCH

  build-python:
    name: Build image and push
    runs-on: ubuntu-latest
    needs: tests-python
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      # Build docker image
      - name: Image
        run: |-
          docker build -t $CONTAINER_REGISTRY/$IMAGE_NAME_NODE_SIDECAR:$HASH . -f Dockerfile.node_sidecar
      - name: Tag
        run: |-
          docker tag $CONTAINER_REGISTRY/$IMAGE_NAME_NODE_SIDECAR:$HASH $CONTAINER_REGISTRY/$IMAGE_NAME_NODE_SIDECAR:$BRANCH
      - name: Push sha
        if: github.event_name == 'push'
        run: |-
          docker push $CONTAINER_REGISTRY/$IMAGE_NAME_NODE_SIDECAR:$HASH
      - name: Push latest
        if: github.event_name == 'push'
        run: |-
          docker push $CONTAINER_REGISTRY/$IMAGE_NAME_NODE_SIDECAR:$BRANCH

  deploy:
    name: Deploy Helm chart and trigger internal CI
    runs-on: ubuntu-latest
    needs: [build-rust, build-python]
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set helm package image
        id: version_step
        run: |-
          sed -i.bak "s#IMAGE_TO_REPLACE#$IMAGE_NAME_NODE:$HASH#" ./charts/nucliadb_node/values.yaml
          sed -i.bak "s#IMAGE_SIDECAR_TO_REPLACE#$IMAGE_NAME_NODE_SIDECAR:$HASH#" ./charts/nucliadb_node/values.yaml
          sed -i.bak "s#CONTAINER_REGISTRY_TO_REPLACE#$CONTAINER_REGISTRY#" ./charts/nucliadb_node/values.yaml
          VERSION=`cat nucliadb_node/VERSION`
          VERSION_SHA=$VERSION+$HASH
          sed -i.bak "s#99999.99999.99999#$VERSION_SHA#" ./charts/nucliadb_node/Chart.yaml
          echo "::set-output name=version_number::$VERSION_SHA"

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v2.0
        with:
          version: v3.4.0

      - name: Push helm package
        run: |-
          helm lint charts/nucliadb_node
          helm package charts/nucliadb_node
          curl --data-binary "@nucliadb_node-${{ steps.version_step.outputs.version_number }}.tgz" ${{ secrets.HELM_CHART_URL }}/api/charts

      - name: Trigger internal Jenkins
        run: |-
          curl -u "${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_KEY }}" --data-urlencode "NUCLIADB_COMPONENT=node"  --data-urlencode "VERSION=${{ steps.version_step.outputs.version_number }}" ${{ secrets.JENKINS_WEBHOOK_URL }}
