name: Release NucliaDB Node

on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_node_release.yml"
      - "nucliadb_node_binding/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "nucliadb_core/**"
      - "nucliadb_node/src/**"
      - "nucliadb_node/Cargo.toml"
      - "nucliadb_paragraphs[0-9]*/**"
      - "nucliadb_relations[0-9]*/**"
      - "nucliadb_texts[0-9]*/**"
      - "nucliadb_vectors/**"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_node_release.yml"
      - "nucliadb_node_binding/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "nucliadb_core/**"
      - "nucliadb_node/Cargo.toml"
      - "nucliadb_node/src/**"
      - "nucliadb_paragraphs[0-9]*/**"
      - "nucliadb_relations[0-9]*/**"
      - "nucliadb_texts[0-9]*/**"
      - "nucliadb_vectors/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: macos
            target: aarch64
          # - os: ubuntu
          #   platform: linux
          #   target: i686
          # GCC 4.8.5 in manylinux2014 container doesn't support c11 atomic
          # we use manylinux_2_24 container for aarch64 and armv7 targets instead,
          - os: ubuntu
            platform: linux
            target: aarch64
            container: messense/manylinux_2_24-cross:aarch64
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.5"
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - name: Setup env
        run: |
          python bump.py --build=${{github.run_number}}

      - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions

      - name: Check system deps
        run: make -C nucliadb check-system

      - name: build sdist
        if: ${{ matrix.os == 'ubuntu' && matrix.target == 'x86_64' && matrix.manylinux == 'auto' }}
        uses: messense/maturin-action@v1
        with:
          command: sdist
          args: -m nucliadb_node_binding/Cargo.toml --out dist

      - name: build wheels
        uses: messense/maturin-action@v1
        env:
          RUSTFLAGS: --cfg tokio_unstable
        with:
          before-script-linux: scripts/install-system-deps.sh
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: -m nucliadb_node_binding/Cargo.toml --release --out dist --profile release-wheel

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: twine check dist/*

      - uses: actions/upload-artifact@v3
        if: github.event_name == 'push'
        with:
          name: pypi_files
          path: dist

  list-pypi-files:
    needs: [build]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: ls -lh dist/
      - run: echo "`ls dist | wc -l` files"

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.5"

      - run: pip install -U twine

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
