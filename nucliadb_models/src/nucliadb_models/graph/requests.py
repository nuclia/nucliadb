# Copyright 2025 Bosutech XXI S.L.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from enum import Enum
from typing import Annotated, Literal, Optional, Union

from pydantic import BaseModel, Discriminator, Field, Tag, model_validator
from typing_extensions import Self

from nucliadb_models.filters import And, FieldFilterExpression, Not, Or, filter_discriminator
from nucliadb_models.metadata import RelationNodeType, RelationType
from nucliadb_models.security import RequestSecurity

## Models for graph nodes and relations


class GraphProp(BaseModel):
    prop: str

    @model_validator(mode="after")
    def set_discriminator(self) -> Self:
        # Ensure discriminator is explicitly set so it's always serialized
        self.prop = self.prop
        return self


class NodeMatchKindName(str, Enum):
    EXACT = "exact"
    FUZZY = "fuzzy"


class GraphNode(BaseModel, extra="forbid"):
    value: Optional[str] = None
    match: NodeMatchKindName = NodeMatchKindName.EXACT
    type: Optional[RelationNodeType] = RelationNodeType.ENTITY
    group: Optional[str] = None

    @model_validator(mode="after")
    def validate_fuzzy_usage(self) -> Self:
        if self.match == NodeMatchKindName.FUZZY:
            if self.value is None:
                raise ValueError("Fuzzy match can only be used if a node value is provided")
            else:
                if len(self.value) < 3:
                    raise ValueError(
                        "Fuzzy match must be used with values containing at least 3 characters"
                    )
        return self


class GraphRelation(BaseModel, extra="forbid"):
    label: Optional[str] = None
    type: Optional[RelationType] = None


## Models for query expressions


class AnyNode(GraphNode, GraphProp):
    prop: Literal["node"] = "node"


class SourceNode(GraphNode, GraphProp):
    prop: Literal["source_node"] = "source_node"


class DestinationNode(GraphNode, GraphProp):
    prop: Literal["destination_node"] = "destination_node"


class Relation(GraphRelation, GraphProp):
    prop: Literal["relation"] = "relation"


class GraphPath(GraphProp, extra="forbid"):
    prop: Literal["path"] = "path"
    source: Optional[GraphNode] = None
    relation: Optional[GraphRelation] = None
    destination: Optional[GraphNode] = None
    undirected: bool = False


class Generator(str, Enum):
    DATA_AUGMENTATION = "data-augmentation"
    PROCESSOR = "processor"
    USER = "user"


class Generated(GraphProp, extra="forbid"):
    """Matches if the relation was generated by the given source"""

    prop: Literal["generated"] = "generated"
    by: Generator = Field(description="Generator for this field.")
    da_task: Optional["str"] = Field(
        default=None, description="Matches relations generated by an specific DA task, given its prefix"
    )

    @model_validator(mode="after")
    def validate_fuzzy_usage(self) -> Self:
        if self.by != Generator.DATA_AUGMENTATION and self.da_task is not None:
            raise ValueError("da_task can only be specified if by=data-augmentation")

        return self


## Requests models


class GraphFilterExpression(BaseModel, extra="forbid"):
    """Returns only relations from documents that match this filter expression.
    Filtering examples can be found here: https://docs.nuclia.dev/docs/rag/advanced/search-filters
    """

    field: FieldFilterExpression = Field(description="Filter to apply to fields")


class BaseGraphSearchRequest(BaseModel):
    top_k: int = Field(default=50, le=500, title="Number of results to retrieve")
    filter_expression: Optional[GraphFilterExpression] = Field(
        default=None,
        title="Filter resource by an expression",
        description=(
            "Returns only relations from documents that match this filter expression."
            "Filtering examples can be found here: https://docs.nuclia.dev/docs/rag/advanced/search-filters "
        ),
    )
    security: Optional[RequestSecurity] = Field(
        default=None,
        title="Security",
        description="Security metadata for the request. If not provided, the search request is done without the security lookup phase.",  # noqa: E501
    )
    show_hidden: bool = Field(
        default=False,
        title="Show hidden resources",
        description="If set to false (default), excludes hidden resources from search",
    )


graph_query_discriminator = filter_discriminator


# Paths search

GraphPathQuery = Annotated[
    Union[
        # bool expressions
        Annotated[And["GraphPathQuery"], Tag("and")],
        Annotated[Or["GraphPathQuery"], Tag("or")],
        Annotated[Not["GraphPathQuery"], Tag("not")],
        # paths
        Annotated[GraphPath, Tag("path")],
        # nodes
        Annotated[SourceNode, Tag("source_node")],
        Annotated[DestinationNode, Tag("destination_node")],
        Annotated[AnyNode, Tag("node")],
        # relations
        Annotated[Relation, Tag("relation")],
        # metadata
        Annotated[Generated, Tag("generated")],
    ],
    Discriminator(graph_query_discriminator),
]


class GraphSearchRequest(BaseGraphSearchRequest):
    query: GraphPathQuery


# Nodes search

GraphNodesQuery = Annotated[
    Union[
        Annotated[And["GraphNodesQuery"], Tag("and")],
        Annotated[Or["GraphNodesQuery"], Tag("or")],
        Annotated[Not["GraphNodesQuery"], Tag("not")],
        Annotated[AnyNode, Tag("node")],
        Annotated[Generated, Tag("generated")],
    ],
    Discriminator(graph_query_discriminator),
]


class GraphNodesSearchRequest(BaseGraphSearchRequest):
    query: GraphNodesQuery


# Relations search

GraphRelationsQuery = Annotated[
    Union[
        Annotated[And["GraphRelationsQuery"], Tag("and")],
        Annotated[Or["GraphRelationsQuery"], Tag("or")],
        Annotated[Not["GraphRelationsQuery"], Tag("not")],
        Annotated[Relation, Tag("relation")],
        Annotated[Generated, Tag("generated")],
    ],
    Discriminator(graph_query_discriminator),
]


class GraphRelationsSearchRequest(BaseGraphSearchRequest):
    query: GraphRelationsQuery


# We need this to avoid issues with pydantic and generic types defined in another module
GraphSearchRequest.model_rebuild()
GraphNodesSearchRequest.model_rebuild()
GraphRelationsSearchRequest.model_rebuild()

And["GraphPathQuery"].model_rebuild()
Or["GraphPathQuery"].model_rebuild()
Not["GraphPathQuery"].model_rebuild()

And["GraphNodesQuery"].model_rebuild()
Or["GraphNodesQuery"].model_rebuild()
Not["GraphNodesQuery"].model_rebuild()

And["GraphRelationsQuery"].model_rebuild()
Or["GraphRelationsQuery"].model_rebuild()
Not["GraphRelationsQuery"].model_rebuild()
