syntax = "proto3";

package nodereader;

import public "nucliadb_protos/noderesources.proto";
import "google/protobuf/timestamp.proto";
import public "nucliadb_protos/utils.proto";

message Filter {
    repeated string tags = 1;
}

message Faceted {
    repeated string tags = 1;
}

message OrderBy {
    enum OrderType {
      DESC = 0;
      ASC = 1;
    }
    string field = 1;
    OrderType type = 2;
}

message Timestamps {
    google.protobuf.Timestamp from_modified = 1;
    google.protobuf.Timestamp to_modified = 2;

    google.protobuf.Timestamp from_created = 3;
    google.protobuf.Timestamp to_created = 4;
}

message FacetResult {
    string tag = 1;
    int32 total = 2;
}
message FacetResults {
    repeated FacetResult facetresults = 1;
}


message DocumentSearchRequest {
    string id = 1;
    string body = 2;

    repeated string fields = 3;

    Filter filter = 4;
    OrderBy order = 5;
    Faceted faceted = 6;

    int32 page_number = 7;
    int32 result_per_page = 8;

    Timestamps timestamps = 9;

    bool reload = 10;

}


message ParagraphSearchRequest {
    string id = 1;
    string uuid = 2;

    repeated string fields = 3;
    // query this text in all the paragraphs
    string body = 4;

    Filter filter = 5;

    OrderBy order = 7;

    // Faceted{ tags: Vec<String>}
    Faceted faceted = 8;

    int32 page_number = 10;
    int32 result_per_page = 11;

    Timestamps timestamps = 12;

    bool reload = 13;

}

message DocumentResult {
    string uuid = 1;
    uint64 score = 2;
    float score_bm25 = 3;
    string field = 4;
}

message DocumentSearchResponse {
    int32 total = 1;


    repeated DocumentResult results = 2;

    map<string, FacetResults> facets = 3;
    
    int32 page_number = 4;
    int32 result_per_page = 5;

    // The text that lead to this results
    string query = 6;
}


message ParagraphResult {
    string uuid = 1;
    float score = 2;
    string field = 3;
    uint64 start = 4;
    uint64 end = 5;
    string paragraph = 6;
    string split = 7;
    uint64 index = 8;
}

message ParagraphSearchResponse {

    int32 total = 1;

    // 
    repeated ParagraphResult results = 2;

    // For each field what facets are.
    map<string, FacetResults> facets = 3;

    // What page is the answer.
    int32 page_number = 4;

    // How many results are in this page.
    int32 result_per_page = 5;

    // The text that lead to this results
    string query = 6;
}

message VectorSearchRequest {
    string id = 1; //Shard ID
    repeated float vector = 2; // Embedded vector search.
    repeated string tags = 3; // tags to filter
    bool reload = 13;

}

message DocumentVectorIdentifier {
    string id = 1;
}

message DocumentScored {
    DocumentVectorIdentifier doc_id = 1;
    float score = 2;
}

message VectorSearchResponse {
    // List of docs closer to the asked one.
    repeated DocumentScored documents = 1;
}

message RelationSearchRequest {
    
}

message RelationSearchResponse {
    
}

message SearchRequest {
    string shard = 1;

    repeated string fields = 2;
    // query this text in all the paragraphs
    string body = 3;

    Filter filter = 4;

    OrderBy order = 5;

    // Faceted{ tags: Vec<String>}
    Faceted faceted = 6;

    int32 page_number = 7;
    int32 result_per_page = 8;

    Timestamps timestamps = 9;

    repeated float vector = 10; // Embedded vector search.

    bool reload = 11;

}

message SuggestRequest {
    string shard = 1;

    string body = 2;

    Filter filter = 3;

    Timestamps timestamps = 4;
}



message SuggestResponse {

    int32 total = 1;

    repeated ParagraphResult results = 2;

}

message SearchResponse {
    DocumentSearchResponse document = 1;
    ParagraphSearchResponse paragraph = 2;
    VectorSearchResponse vector = 3;
}

message IdCollection {
    repeated string ids = 1;
}

// Implemented at nucliadb_object_storage

service NodeReader {
    rpc GetShard(noderesources.ShardId) returns (noderesources.Shard) {}
    rpc GetShards(noderesources.EmptyQuery) returns (noderesources.ShardList) {}

    rpc DocumentSearch(DocumentSearchRequest) returns (DocumentSearchResponse) {}
    rpc ParagraphSearch(ParagraphSearchRequest) returns (ParagraphSearchResponse) {}
    rpc VectorSearch(VectorSearchRequest) returns (VectorSearchResponse) {}
    rpc RelationSearch(RelationSearchRequest) returns (RelationSearchResponse) {}

    rpc DocumentIds(noderesources.ShardId) returns (IdCollection) {}
    rpc ParagraphIds(noderesources.ShardId) returns (IdCollection) {}
    rpc VectorIds(noderesources.ShardId) returns (IdCollection) {}

    rpc Search(SearchRequest) returns (SearchResponse) {}
    rpc Suggest(SuggestRequest) returns (SuggestResponse) {}
}
