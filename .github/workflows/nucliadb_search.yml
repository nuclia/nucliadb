name: nucliadb Search (py)
env:
  API_VERSION: 1
  COMPONENT: nucliadb-search
on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_search.yml"
      - "charts/nucliadb_search/**"
      - "nucliadb_search/**"
      - "Dockerfile.search"
      - "nucliadb_utils/**"
      - "nucliadb_swim/nucliadb_swim/**"
      - "nucliadb_ingest/**"
      - "nucliadb_models/**"
      - "nucliadb_protos/python/**"
      - "nucliadb_cluster/nucliadb_cluster/**"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_search.yml"
      - "charts/nucliadb_search/**"
      - "nucliadb_search/**"
      - "Dockerfile.search"
      - "nucliadb_utils/**"
      - "nucliadb_swim/nucliadb_swim/**"
      - "nucliadb_ingest/**"
      - "nucliadb_models/**"
      - "nucliadb_protos/python/**"
      - "nucliadb_cluster/nucliadb_cluster/**"

jobs:
  # Job to run pre-checks
  pre-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install -r code-requirements.txt
      - name: Run pre-checks
        run: |
          flake8 nucliadb_search --config=nucliadb_search/setup.cfg
          isort -c --profile black nucliadb_search/
          black --check --verbose nucliadb_search

  # Job to run tests
  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # setup docker, as we need to pull the node image to run the tests
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the package
        run: |
          pip install -r test-requirements.txt
          pip install -r nucliadb_search/requirements-sources.txt
          pip install -e nucliadb_swim
          pip install -e nucliadb_cluster
          pip install -r nucliadb_ingest/requirements.txt
          pip install -e nucliadb_ingest
          pip install -r nucliadb_search/requirements.txt
          pip install -e nucliadb_search

      - name: Check mypy
        run: |
          MYPYPATH=./mypy_stubs mypy nucliadb_search/

      - name: Run tests
        run: |
          pytest -rfE --cov=nucliadb_search -s --tb=native -v --cov-report xml --cov-append nucliadb_search/nucliadb_search

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml

      - name: Extract docs
        run: |
          mkdir -p /tmp/openapi
          extract-openapi /tmp/openapi/$COMPONENT.json $API_VERSION

      - name: Cache extracted docs
        uses: actions/cache@v2
        with:
          path: /tmp/openapi
          key: openapi-${{ env.COMPONENT }}

  build:
    name: Build image and push
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push'

    env:
      HASH: $(git rev-parse --short "$GITHUB_SHA")
      BRANCH: ${GITHUB_REF##*/}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      IMAGE_NAME: eu.gcr.io/${{ secrets.PROJECT_ID }}/search

    steps:
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Checkout repository
        uses: actions/checkout@v3

      # Build docker image
      - name: Image
        run: |-
          docker build -t $IMAGE_NAME:$GITHUB_SHA . -f Dockerfile.search
      - name: Tag
        run: |-
          docker tag $IMAGE_NAME:$GITHUB_SHA $IMAGE_NAME:latest
      - name: Push sha
        if: github.event_name == 'push'
        run: |-
          docker push $IMAGE_NAME:$GITHUB_SHA
      - name: Push latest
        if: github.event_name == 'push'
        run: |-
          docker push $IMAGE_NAME:latest

  deploy:
    name: Deploy Helm chart and trigger internal CI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    env:
      IMAGE_NAME: eu.gcr.io/${{ secrets.PROJECT_ID }}/search

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set helm package image
        id: version_step
        run: |-
          sed -i.bak "s#IMAGE_TO_REPLACE#$IMAGE_NAME:$GITHUB_SHA#" ./charts/nucliadb_search/values.yaml
          VERSION=`cat nucliadb_search/VERSION`
          VERSION_SHA=$VERSION+$(echo $GITHUB_SHA | cut -c1-6)
          sed -i.bak "s#99999.99999.99999#$VERSION_SHA#" ./charts/nucliadb_search/Chart.yaml
          echo "::set-output name=version_number::$VERSION_SHA"

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Push helm package
        run: |-
          helm lint charts/nucliadb_search
          helm package charts/nucliadb_search
          curl --data-binary "@nucliadb_search-${{ steps.version_step.outputs.version_number }}.tgz" ${{ secrets.HELM_CHART_URL }}/api/charts

      - name: Trigger internal Jenkins
        run: |-
          curl -u "${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_KEY }}" --data-urlencode "NUCLIADB_COMPONENT=search"  --data-urlencode "VERSION=${{ steps.version_step.outputs.version_number }}" ${{ secrets.JENKINS_WEBHOOK_URL }}

  docs:
    name: "Upload API specs to GCS"
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push'

    env:
      API_VERSION: 1

    steps:
      - name: Cache extracted docs
        uses: actions/cache@v2
        with:
          path: /tmp/openapi
          key: openapi-${{ env.COMPONENT }}

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: Upload docs
        run: |
          gsutil copy /tmp/openapi/$COMPONENT.json gs://stashify-docs/api/regional/v$API_VERSION/$COMPONENT/spec.json
