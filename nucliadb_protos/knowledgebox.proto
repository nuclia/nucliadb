syntax = "proto3";

package knowledgebox;

import public "nucliadb_protos/utils.proto";


enum KnowledgeBoxResponseStatus {
    OK = 0;
    CONFLICT = 1;
    NOTFOUND = 2;
    ERROR = 3;

}

// ID

message KnowledgeBoxID {
    string slug = 1;
    string uuid = 2;
}

// GET

message KnowledgeBox {
    string slug = 1;
    string uuid = 2;
    KnowledgeBoxResponseStatus status = 3;

    KnowledgeBoxConfig config = 4;
}


message KnowledgeBoxConfig {
    string title = 1;
    string description = 2;
    repeated string enabled_filters = 3 [deprecated = true];
    repeated string enabled_insights = 4 [deprecated = true];
    string slug = 5;
    bool disable_vectors = 6 [deprecated = true];
    int64 migration_version = 7;
    utils.ReleaseChannel release_channel = 8;
}

// NEW

message KnowledgeBoxNew {
    string slug = 1;
    KnowledgeBoxConfig config = 2;
    string forceuuid = 3;
    utils.VectorSimilarity similarity = 4;
    optional int32 vector_dimension = 5;
    optional float default_min_score = 6;
    utils.ReleaseChannel release_channel = 7;
}


message NewKnowledgeBoxResponse {
    KnowledgeBoxResponseStatus status = 1;
    string uuid = 2;
}

// SEARCH / LIST

message KnowledgeBoxPrefix {
    string prefix = 1;
}

// UPDATE

message KnowledgeBoxUpdate {
    string slug = 1;
    string uuid = 2;
    KnowledgeBoxConfig config = 3;
}

message UpdateKnowledgeBoxResponse {
    KnowledgeBoxResponseStatus status = 1;
    string uuid = 2;
}

// GC

message GCKnowledgeBoxResponse {

}

// DELETE

message DeleteKnowledgeBoxResponse {
    KnowledgeBoxResponseStatus status = 1;
}

// Clean Index

message CleanedKnowledgeBoxResponse {

}

// Labels on a Knowledge Box


message Label {
    string title = 2;
    string related = 3;
    string text = 4;
    string uri = 5;
}

message LabelSet {
    enum LabelSetKind {
        RESOURCES = 0;
        PARAGRAPHS = 1;
        SENTENCES = 2;
        SELECTIONS = 3;
    }
    string title = 1;
    string color = 2;
    repeated Label labels = 3;
    bool multiple = 4;
    repeated LabelSetKind kind = 5;
}

message Labels {
    map<string, LabelSet> labelset = 1;
}


// Entities on a Knowledge Box


message Entity {
    string value = 2;
    repeated string represents = 4;

    bool merged = 3;
    bool deleted = 5;
}

message EntitiesGroupSummary {
    string title = 2;
    string color = 3;
    bool custom = 4;
}

message EntitiesGroup {
    map<string, Entity> entities = 1;
    string title = 2;
    string color = 3;
    bool custom = 4;
}

message DeletedEntitiesGroups {
    repeated string entities_groups = 1;
}

message EntitiesGroups {
    map <string, EntitiesGroup> entities_groups = 1;
}

message EntityGroupDuplicateIndex {
    //
    // Structure to represent all duplicates defined in a kb
    //     - call it an "Index" because it should include flattened version of all duplicated entries
    //     - this allows 1 call to pull all duplicates
    //

    message EntityDuplicates {
        repeated string duplicates = 1;
    }
    message EntityGroupDuplicates {
        map<string, EntityDuplicates> entities = 1;
    }
    map <string, EntityGroupDuplicates> entities_groups = 1;
}


// Vectorsets


message VectorSet {
    int32 dimension = 1;
    utils.VectorSimilarity similarity = 2;
}

message VectorSets {
    map<string, VectorSet> vectorsets = 1;
}


// Synonyms of a Knowledge Box

message TermSynonyms {
    repeated string synonyms = 1;
}


message Synonyms {
    map <string, TermSynonyms> terms = 1;
}


// Metadata of the model associated to the KB
message SemanticModelMetadata {
    utils.VectorSimilarity similarity_function = 1;
    optional int32 vector_dimension = 2;
    optional float default_min_score = 3;
}

// Do not update this model without confirmation of internal Learning Config API

// Deprecated
message KBConfiguration {
    string semantic_model = 2;
    string generative_model = 3;
    string ner_model = 4;
    string anonymization_model = 5;
    string visual_labeling = 6;
}
