name: nucliadb (py)
env:
  API_VERSION: 1
  COMPONENT: nucliadb
  CONTAINER_REGISTRY: eu.gcr.io/${{ secrets.PROJECT_ID }}
permissions:
  contents: write
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Job to run pre-checks
  pre-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install package
        run: make -C nucliadb/ install-dev

      - name: Run pre-checks
        run: make -C nucliadb/ lint

  # Job to run tests
  tests:
    name: NucliaDBTests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install the package
        run: make -C nucliadb/ install-dev

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflows:
              - 'nucliadb_node/**'
              - 'nucliadb_fields_tantivy/**'
              - 'nucliadb_paragraphs_tantivy/**'
              - 'nucliadb_vectors/**'
              - 'nucliadb_relations/**'

      - name: Install rust binding for testing
        if: steps.filter.outputs.workflows == 'true'
        run: |
          maturin build -m nucliadb_node/binding/Cargo.toml
          pip install target/wheels/*_x86_64.whl

      - name: Run tests
        # These tests can be flaky, let's retry them...
        uses: nick-fields/retry@v2
        with:
          max_attempts: 2
          retry_on: error
          timeout_minutes: 10
          command: |
            pytest -rfE --cov=nucliadb -s --tb=native -v --cov-report xml --cov-append --benchmark-json benchmarks.json nucliadb/nucliadb/tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: nucliadb

      - name: Download previous benchmark data
        uses: actions/cache@v1
        with:
          path: ./cache
          key: ${{ runner.os }}-nucliadb-benchmark

      - name: Comment and Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'push'
        with:
          tool: "pytest"
          output-file-path: benchmarks.json
          external-data-json-path: ./cache/benchmark-data.json
          save-data-file: true
          comment-always: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: "@nuclia/nuclia-db"

      - name: Comment benchmark result based on main
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name != 'push'
        with:
          tool: "pytest"
          output-file-path: benchmarks.json
          external-data-json-path: ./cache/benchmark-data.json
          save-data-file: false
          comment-always: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: "@nuclia/nuclia-db"

      - name: Store on GH Pages
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'push'
        with:
          tool: "pytest"
          output-file-path: benchmarks.json
          auto-push: true
          github-token: ${{ secrets.PERFORMANCE_TOKEN }}
          gh-repository: github.com/nuclia/nucliadb_performance
          gh-pages-branch: main

  push:
    name: Build and push docker image
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get release version
        id: version_step
        run: |-
          python bump.py --build=${{github.run_number}}
          VERSION=`cat VERSION`
          echo "version_number=$VERSION" >> $GITHUB_OUTPUT

      # We need to setup buildx to be able to cache with gha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            nuclia/nucliadb:latest
            nuclia/nucliadb:${{ steps.version_step.outputs.version_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

  push-dev:
    name: Build dev image and push
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get safe branch name
        id: branch_name
        run: |-
          BRANCH_NAME=`echo $GITHUB_HEAD_REF | sed 's$/$-$g'`
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Setup gcloud CLI
        uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      # We need to setup buildx to be able to cache with gha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.CONTAINER_REGISTRY }}/${{ env.COMPONENT }}:${{ steps.branch_name.outputs.branch_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
