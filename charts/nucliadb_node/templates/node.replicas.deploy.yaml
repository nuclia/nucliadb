{{- $release := .Release }}
{{- $values := .Values }}
{{- $chart := .Chart }}
{{- range $i, $e := until (int .Values.replicaCount) }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: node-replica-{{ $i }}
  labels:
    app: node-replica
    appType: node
    readReplica: "true"
    app.kubernetes.io/name: node-replica-{{ $i }}
    app.kubernetes.io/instance: "{{ $release.Name }}"
    app.kubernetes.io/managed-by: {{ $release.Service }}
    version: "{{ $chart.Version | replace "+" "_" }}"
    chart: "{{ $chart.Name }}"
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  replicas: {{ $values.readReplicas.count }}
  revisionHistoryLimit: {{ $values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: node-replica
      app.kubernetes.io/name: node-replica-{{ $i }}
      app.kubernetes.io/instance: "{{ $release.Name }}"
      app.kubernetes.io/managed-by: {{ $release.Service }}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
        # do not have access to dependency chart cm this component references
        {{- if hasKey $values "extra_pod_annotations" }}
{{ toYaml $values.extra_pod_annotations | indent 8 }}
        {{- end }}
      name: node-replica-{{ $i }}
      labels:
        app: node-replica
        appType: node
        readReplica: "true"
        app.kubernetes.io/name: node-replica-{{ $i }}
        app.kubernetes.io/instance: "{{ $release.Name }}"
        app.kubernetes.io/managed-by: {{ $release.Service }}
        version: "{{ $chart.Version | replace "+" "_" }}"
        chart: "{{ $chart.Name }}"
    spec:
      terminationGracePeriodSeconds: 120
{{- if $values.readReplicas.nodeSelector }}
      nodeSelector:
{{ toYaml $values.readReplicas.nodeSelector | indent 8 }}
{{- end }}
{{- if $values.readReplicas.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml $values.readReplicas.topologySpreadConstraints | indent 8 }}
{{- end }}
{{- with $values.readReplicas.priorityClassName }}
      priorityClassName: {{ . }}
{{- end }}
{{- if $values.readReplicas.affinity }}
      affinity:
{{ toYaml $values.readReplicas.affinity | indent 8 }}
{{- with $values.readReplicas.zoneAwarePlacement }}
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: statefulset.kubernetes.io/pod-name
                operator: In
                values:
                - node-{{ $i }}
            topologyKey: topology.kubernetes.io/zone
{{- end }}
{{- end }}
{{- if not $values.readReplicas.affinity }}
{{- with $values.readReplicas.zoneAwarePlacement }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: statefulset.kubernetes.io/pod-name
                operator: In
                values:
                - node-{{ $i }}
            topologyKey: topology.kubernetes.io/zone
{{- end }}
{{- end }}
{{- if $values.readReplicas.tolerations }}
      tolerations:
{{ toYaml $values.readReplicas.tolerations | indent 8 }}
{{- end }}
      dnsPolicy: ClusterFirst
      serviceAccountName:  {{ (($values.readReplicas).serviceAccount) | default "default" }}
      volumes:
      - name: data-dir
        emptyDir:
{{- with $values.readReplicas.emptyDirSizeLimit }}
          sizeLimit: {{ . }}
{{- end }}
{{- with $values.nats.secretName }}
      - name: nats-creds
        secret:
          secretName: {{ . }}
{{- end }}
      containers:
      - name: writer
        securityContext:
          privileged: true
        image: "{{ $values.containerRegistry }}/{{ $values.image }}"
        imagePullPolicy: {{ $values.imagePullPolicy }}
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ $values.serving.grpc_writer }}", "-service=nodewriter.NodeWriter", "-connect-timeout=2000ms", "-rpc-timeout=2000ms"]
          initialDelaySeconds: 10
          periodSeconds: 60
        command: ["node_writer"]
        envFrom:
          - configMapRef:
              name: node-config
          - secretRef:
              name: node-config
          {{- if $values.envFrom }}
          {{- toYaml $values.envFrom | nindent 10 }}
          {{- end }}
        env:
          - name: NODE_ROLE
            value: secondary
          - name: PRIMARY_ADDRESS
            value: "node-{{ $i }}.node:{{ $values.serving.grpc_writer }}"
          - name: METRICS_PORT
            value: "3032"
          {{- include "toEnv" $values.env | indent 10 }}
        ports:
        - name: grpc-writer
          containerPort: {{ $values.serving.grpc_writer }}
          protocol: TCP
        - name: metrics
          containerPort: 3032
        resources:
{{ toYaml $values.readReplicas.resources.writer | indent 10 }}
        volumeMounts:
        - name: data-dir
          mountPath: {{ $values.config.data_path }}
      - name: reader
        securityContext:
          privileged: true
        image: "{{ $values.containerRegistry }}/{{ $values.image }}"
        imagePullPolicy: {{ $values.imagePullPolicy }}
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ $values.serving.grpc_reader }}", "-service=nodereader.NodeReader"]
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 10
        # Disable livenessProbe for now since
        # we need a different livenessProbe than readinessProbe
        # for a read replica
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:{{ $values.serving.grpc_reader }}", "-service=nodereader.NodeReader"]
        #   initialDelaySeconds: 2
        command: ["node_reader"]
        envFrom:
          - configMapRef:
              name: node-config
          {{- if $values.envFrom }}
          {{- toYaml $values.envFrom | nindent 10 }}
          {{- end }}
        env:
          - name: NODE_ROLE
            value: secondary
          - name: METRICS_PORT
            value: "3031"
          {{- include "toEnv" $values.env | indent 10 }}
        ports:
        - name: grpc-reader
          containerPort: {{ $values.serving.grpc_reader }}
          protocol: TCP
        - name: metrics
          containerPort: 3031
        resources:
{{ toYaml $values.readReplicas.resources.reader | indent 10 }}
        volumeMounts:
        - name: data-dir
          mountPath: {{ $values.config.data_path }}
---
{{- end }}
