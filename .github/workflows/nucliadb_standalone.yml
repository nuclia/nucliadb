name: nucliadb Standalone (py)
env:
  API_VERSION: 1
  COMPONENT: nucliadb-standalone
on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_standalone.yml"
      - "charts/nucliadb/**"
      - "nucliadb/nucliadb/ingest/**"
      - "nucliadb/nucliadb/writer/**"
      - "nucliadb/nucliadb/standalone/**"
      - "nucliadb/nucliadb/reader/**"
      - "nucliadb/nucliadb/search/**"
      - "nucliadb_models/**"
      - "nucliadb_protos/**"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_standalone.yml"
      - "charts/nucliadb/**"
      - "nucliadb/nucliadb/ingest/**"
      - "nucliadb/nucliadb/writer/**"
      - "nucliadb/nucliadb/standalone/**"
      - "nucliadb/nucliadb/reader/**"
      - "nucliadb/nucliadb/search/**"
      - "nucliadb_models/**"
      - "nucliadb_protos/**"
      - "VERSION"
jobs:
  # Job to run pre-checks
  pre-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install package
        run: make -C nucliadb/ install-dev

      - name: Run pre-checks
        run: make -C nucliadb/ lint-standalone

  # Job to run tests
  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      # setup docker, as we need to pull the node image to run the tests
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install the package
        run: make -C nucliadb/ install-dev

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            node_modified:
              - 'nucliadb_node/src/**'
            sidecar_modified:
              - 'nucliadb_node/nucliadb_node/**'
            cluster_modified:
              - 'nucliadb_cluster/**'

      # we may need eu.gcr.io/stashify-218417/node
      # or eu.gcr.io/stashify-218417/cluster_manager
      # or eu.gcr.io/stashify-218417/node_sidecar

      # We need to setup buildx to be able to cache with gha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build local Node for testing
        if: steps.filter.outputs.node_modified == 'true'
        run: |
          docker build -t eu.gcr.io/stashify-218417/node:main -f Dockerfile.node .

      - name: Build local Sidecar for testing
        if: steps.filter.outputs.sidecar_modified == 'true'
        run: |
          docker build -t eu.gcr.io/stashify-218417/node_sidecar:main -f Dockerfile.node_sidecar .

      - name: Build local ClusterManager for testing
        if: steps.filter.outputs.cluster_modified == 'true'
        run: |
          docker build -t eu.gcr.io/stashify-218417/cluster_manager:main -f Dockerfile.cluster_monitor .

      - name: Run tests
        run: |
          pytest -rfE --cov=nucliadb.standalone -s --tb=native -v --cov-report xml --cov-append nucliadb/nucliadb/standalone

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: standalone

  release-chart:
    name: Release chart
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            version_modified:
              - 'VERSION'

      - name: Calculate short sha
        id: env-vars
        run: |-
          HASH=`git rev-parse --short HEAD`
          echo "short_sha=$HASH" >> $GITHUB_OUTPUT

      - name: Set image version
        run: |-
          VERSION=`cat VERSION`
          VERSION_SHA=$VERSION+${{ steps.env-vars.outputs.short_sha }}
          sed -i.bak "s#99999.99999.99999#$VERSION_SHA#" ./charts/nucliadb_reader/Chart.yaml

      - name: Set helm package image
        id: version_step
        run: |-
          VERSION=`cat VERSION`
          echo "version_number=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Helm
        uses: azure/setup-helm@v2.0
        with:
          version: v3.4.0

      - name: Build helm package
        run: |-
          helm lint charts/nucliadb
          helm package charts/nucliadb
          curl --data-binary "@nucliadb_reader-${{ steps.version_step.outputs.version_number }}.tgz" ${{ secrets.HELM_CHART_URL }}/api/charts

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.version_step.outputs.version_number }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_step.outputs.version_number }}
          release_name: Release ${{ steps.version_step.outputs.version_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./nucliadb-${{ steps.version_step.outputs.version_number }}.tgz
          asset_name: nucliadb-${{ steps.version_step.outputs.version_number }}.tgz
          asset_content_type: application/tar+gzip