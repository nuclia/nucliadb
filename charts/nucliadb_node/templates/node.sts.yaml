kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: node
  labels:
    app: node
    appType: node
    app.kubernetes.io/name: node
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    version: "{{ .Chart.Version | replace "+" "_" }}"
    chart: "{{ .Chart.Name }}"
    sidecar.istio.io/inject: "false"
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  serviceName: node
  selector:
    matchLabels:
      app: node
      app.kubernetes.io/name: node
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
        # do not have access to dependency chart cm this component references
        checksum/cm: {{ include (print $.Template.BasePath "/node.cm.yaml") . | sha256sum }}
        {{- if hasKey .Values "extra_pod_annotations" }}
{{ toYaml .Values.extra_pod_annotations | indent 8 }}
        {{- end }}
      name: node
      labels:
        app: node
        appType: node
        app.kubernetes.io/name: node
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        version: "{{ .Chart.Version | replace "+" "_" }}"
        chart: "{{ .Chart.Name }}"
    spec:
      terminationGracePeriodSeconds: 120
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      topologySpreadConstraints:
{{ toYaml .Values.topologySpreadConstraints | indent 8 }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      dnsPolicy: ClusterFirst
{{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
{{- end }}
      serviceAccountName: {{ .Values.serviceAccount | default "default" }}
{{- if .Values.nats.secretName }}
      volumes:
      - name: nats-creds
        secret:
          secretName: {{ .Values.nats.secretName }}
{{- end }}
      containers:
      - name: sidecar
        image: "{{ .Values.containerRegistry }}/{{ .Values.image_sidecar }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.serving.grpc_sidecar }}"]
          initialDelaySeconds: 2
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.serving.grpc_sidecar }}"]
          initialDelaySeconds: 10
          periodSeconds: 60
          timeoutSeconds: 5
          failureThreshold: 3
        command: ["node_sidecar"]
        envFrom:
          - configMapRef:
              name: node-config
          - secretRef:
              name: node-config
          {{- if .Values.envFrom }}
          {{- toYaml .Values.envFrom | nindent 10 }}
          {{- end }}
        env:
          - name: VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['version']
          {{- include "toEnv" .Values.env | indent 10 }}
        ports:
        - name: grpc-sidecar
          containerPort: {{ .Values.serving.grpc_sidecar }}
          protocol: TCP
        - name: metrics
          containerPort: {{ .Values.serving.metricsPort }}
        resources:
{{ toYaml .Values.resources.sidecar | indent 10 }}
        volumeMounts:
        - name: node-pv
          mountPath: {{ .Values.config.data_path }}
{{- if .Values.nats.secretName }}
        - name: nats-creds
          readOnly: true
          mountPath: /appsecrets
{{- end }}
      - name: writer
        securityContext:
          privileged: true
        image: "{{ .Values.containerRegistry }}/{{ .Values.image }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.serving.grpc_writer }}", "-service=nodewriter.NodeWriter", "-connect-timeout=2000ms", "-rpc-timeout=2000ms"]
          initialDelaySeconds: 10
          periodSeconds: 60
        command: ["node_writer"]
        envFrom:
          - configMapRef:
              name: node-config
          - secretRef:
              name: node-config
          {{- if .Values.envFrom }}
          {{- toYaml .Values.envFrom | nindent 10 }}
          {{- end }}
        env:
          - name: METRICS_PORT
            value: "3032"
          {{- include "toEnv" .Values.env | indent 10 }}
        ports:
        - name: grpc-writer
          containerPort: {{ .Values.serving.grpc_writer }}
          protocol: TCP
        - name: metrics
          containerPort: 3032
        resources:
{{ toYaml .Values.resources.writer | indent 10 }}
        volumeMounts:
        - name: node-pv
          mountPath: {{ .Values.config.data_path }}
      - name: reader
        securityContext:
          privileged: true
        image: "{{ .Values.containerRegistry }}/{{ .Values.image }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.serving.grpc_reader }}", "-service=nodereader.NodeReader"]
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 10
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.serving.grpc_reader }}", "-service=nodereader.NodeReader"]
          initialDelaySeconds: 2
        command: ["node_reader"]
        envFrom:
          - configMapRef:
              name: node-config
          - secretRef:
              name: node-config
          {{- if .Values.envFrom }}
          {{- toYaml .Values.envFrom | nindent 10 }}
          {{- end }}
        env:
          - name: METRICS_PORT
            value: "3031"
          {{- include "toEnv" .Values.env | indent 10 }}
        ports:
        - name: grpc-reader
          containerPort: {{ .Values.serving.grpc_reader }}
          protocol: TCP
        - name: metrics
          containerPort: 3031
        resources:
{{ toYaml .Values.resources.reader | indent 10 }}
        volumeMounts:
        - name: node-pv
          mountPath: {{ .Values.config.data_path }}
  volumeClaimTemplates:
  - metadata:
      name: node-pv
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.storage.class }}
      resources:
        requests:
          storage: {{ .Values.storage.size }}
