name: nucliadb (py)
env:
  API_VERSION: 1
  COMPONENT: nucliadb
on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb.yml"
      - "charts/nucliadb/**"
      - "Dockerfile"
      - "nucliadb/**"
      - "nucliadb_utils/**"
      - "nucliadb_fields_tantivy/**"
      - "nucliadb_paragraphs_tantivy/**"
      - "nucliadb_relations/**"
      - "nucliadb_node/**"
      - "nucliadb_vectors2/**"
      - "nucliadb_protos/**"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb.yml"
      - "charts/nucliadb/**"
      - "Dockerfile"
      - "nucliadb/**"
      - "nucliadb_utils/**"
      - "nucliadb_fields_tantivy/**"
      - "nucliadb_paragraphs_tantivy/**"
      - "nucliadb_relations/**"
      - "nucliadb_node/**"
      - "nucliadb_vectors2/**"
      - "nucliadb_protos/**"

jobs:
  # Job to run pre-checks
  pre-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install package
        run: |
          pip install -r code-requirements.txt
      - name: Run pre-checks
        run: |
          flake8 nucliadb --config=nucliadb/setup.cfg
          isort -c --profile black nucliadb/
          black --check --verbose nucliadb

  # Job to run tests
  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      # # Setup gcloud CLI
      # - uses: google-github-actions/auth@v0
      #   with:
      #     credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # - name: "Set up Cloud SDK"
      #   uses: "google-github-actions/setup-gcloud@v0"

      # # setup docker, as we need to pull the node image to run the tests
      # - name: Configure Docker
      #   run: gcloud auth configure-docker --quiet

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install the package
        run: |
          pip install -r test-requirements.txt
          pip install -r nucliadb/requirements-sources.txt
          pip install -r nucliadb/requirements.txt
          pip install -e nucliadb

      - name: Check mypy
        run: |
          MYPYPATH=./mypy_stubs mypy nucliadb/

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflows:
              - 'nucliadb_node/**'

      - name: Install rust binding for testing
        if: steps.filter.outputs.workflows == 'true'
        run: |
          maturin build -m nucliadb_node/binding/Cargo.toml
          pip install target/wheels/*_x86_64.whl

      - name: Run tests
        run: |
          pytest -rfE --cov=nucliadb -s --tb=native -v --cov-report xml --cov-append nucliadb/nucliadb/tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: nucliadb

  build:
    name: Validate docker build
    runs-on: ubuntu-latest
    if: github.event_name != 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker - Build
        run: |-
          docker build -t test_image . -f Dockerfile

  push:
    name: Build and push docker image
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: nuclia/nucliadb:latest
          cache-from: type=registry,ref=nuclia/nucliadb:buildcache
          cache-to: type=registry,ref=nuclia/nucliadb:buildcache,mode=max
