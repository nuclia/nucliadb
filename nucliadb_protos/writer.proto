syntax = "proto3";

package fdbwriter;

import "google/protobuf/timestamp.proto";

import public "nucliadb_protos/noderesources.proto";
import public "nucliadb_protos/resources.proto";
import public "nucliadb_protos/knowledgebox.proto";

// We receive this information throw an stream system

message Audit {
    string user = 1;
    google.protobuf.Timestamp when = 2;
    string origin = 3;
    enum Source {
        HTTP = 0;
        DASHBOARD = 1;
        DESKTOP = 2;
    }
    Source source = 4;
}

message Error {
    string field = 1;
    resources.FieldType field_type = 2;
    string error = 3;
    enum ErrorCode {
        GENERIC = 0;
        EXTRACT = 1;
        PROCESS = 2;
    }
    ErrorCode code = 4;
}

message BrokerMessage {
    string kbid = 1;
    string uuid = 3;
    string slug = 4;
    Audit audit = 5;

    enum MessageType {
        AUTOCOMMIT = 0;
        MULTI = 1;
        COMMIT = 2;
        ROLLBACK = 3;
        DELETE = 4;
    }

    enum MessageSource {
        WRITER = 0;
        PROCESSOR = 1;
    }

    MessageType type = 6;
    string multiid = 7;

    resources.Basic basic = 8;

    resources.Origin origin = 9;

    repeated utils.Relation relations = 10;

    // Field Conversations
    map<string, resources.Conversation> conversations = 11;

    // Field Layout
    map<string, resources.FieldLayout> layouts = 12;

    // Field Text
    map<string, resources.FieldText> texts = 13;

    // Field keyword
    map<string, resources.FieldKeywordset> keywordsets = 14;

    // Field Datetime
    map<string, resources.FieldDatetime> datetimes = 15;

    // Field Links
    map<string, resources.FieldLink> links = 16;

    // Field File
    map<string, resources.FieldFile> files = 17;

    // Link extracted extra info
    repeated resources.LinkExtractedData link_extracted_data = 18;

    // File extracted extra info
    repeated resources.FileExtractedData file_extracted_data = 19;

    // Field Extracted/Computed information
    repeated resources.ExtractedTextWrapper extracted_text = 20;

    repeated resources.FieldComputedMetadataWrapper field_metadata = 21;
    repeated resources.ExtractedVectorsWrapper field_vectors = 22;

    // Resource Large Computed Metadata
    repeated resources.LargeComputedMetadataWrapper field_large_metadata = 23;

    repeated resources.FieldID delete_fields = 24;

    int32 origin_seq = 25;
    float slow_processing_time = 26;
    float pre_processing_time = 28;
    google.protobuf.Timestamp done_time = 29;

    // Not needed anymore
    int64 txseqid = 30 [deprecated = true];

    repeated Error errors = 31;
    string processing_id = 32;
    MessageSource source = 33;
}

message WriterStatusResponse {
    repeated string knowledgeboxes = 1;
    // map of last message processed
    map<string, int64> msgid = 2;
}

message WriterStatusRequest {
}

message SetLabelsRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string id = 2;
    knowledgebox.LabelSet labelset = 3;
}

message DelLabelsRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string id = 2;
}

message GetLabelsResponse {
    knowledgebox.KnowledgeBoxID kb = 1;
    knowledgebox.Labels labels = 2;
    enum Status {
        OK = 0;
        NOTFOUND = 1;
    }
    Status status = 3;

}

message GetLabelsRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
}

message SetEntitiesRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string group = 2;
    knowledgebox.EntitiesGroup entities = 3;
}


message GetEntitiesRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
}

message GetEntitiesResponse {
    knowledgebox.KnowledgeBoxID kb = 1;
    map <string, knowledgebox.EntitiesGroup> groups = 2;
    enum Status {
        OK = 0;
        NOTFOUND = 1;
    }
    Status status = 3;
}

message DelEntitiesRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string group = 2;
}

message MergeEntitiesRequest {
    message EntityID {
        string group = 1;
        string entity = 2;
    }
    knowledgebox.KnowledgeBoxID kb = 1;
    EntityID from = 2;
    EntityID to = 3;
}

message GetLabelSetRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string labelset = 2;
}

message GetLabelSetResponse {
    knowledgebox.KnowledgeBoxID kb = 1;
    knowledgebox.LabelSet labelset = 2;
    enum Status {
        OK = 0;
        NOTFOUND = 1;
    }
    Status status = 3;
}


message GetEntitiesGroupRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string group = 2;
}

message GetEntitiesGroupResponse {
    knowledgebox.KnowledgeBoxID kb = 1;
    knowledgebox.EntitiesGroup group = 2;
    enum Status {
        OK = 0;
        NOTFOUND = 1;
    }
    Status status = 3;
}


message GetWidgetRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string widget = 2;
}

message GetWidgetResponse {
    knowledgebox.KnowledgeBoxID kb = 1;
    knowledgebox.Widget widget = 2;
    enum Status {
        OK = 0;
        NOTFOUND = 1;
    }
    Status status = 3;
}


message GetWidgetsRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
}

message GetWidgetsResponse {
    knowledgebox.KnowledgeBoxID kb = 1;
    map <string, knowledgebox.Widget> widgets = 2;
    enum Status {
        OK = 0;
        NOTFOUND = 1;
    }
    Status status = 3;
}

message SetWidgetsRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    knowledgebox.Widget widget = 2;
}

message DetWidgetsRequest {
    knowledgebox.KnowledgeBoxID kb = 1;
    string widget = 2;
}


message OpStatusWriter {
    enum Status {
        OK = 0;
        ERROR = 1;
        NOTFOUND = 2;
    }
    Status status = 1;
}

message Notification {
    int32 partition = 1;
    string multi = 2;
    string uuid = 3;
    string kbid = 4;
    int64 seqid = 5;
    enum Action {
        COMMIT = 0;
        ABORT = 1;
    }
    Action action = 6;
}


/// The member information.
message Member {
    /// Member ID.ã€€A string of the UUID.
    string id = 1;

    /// Cluster listen address. string of IP and port number.
    /// E.g. 127.0.0.1:5000
    string listen_address = 2;

    /// If true, it means self.
    bool is_self = 3;

    /// Writer, Node, Reader
    string type = 4;

    /// Dummy Member
    bool dummy = 5;
}

message ListMembersRequest {
}

message ListMembersResponse {
  repeated Member members = 1;
}


message ShardReplica {
    noderesources.ShardCreated shard = 1;
    string node = 2;
}

message ShardObject {
    string shard = 1;
    repeated ShardReplica replicas = 3;
    google.protobuf.Timestamp timestamp = 4;
}

message Shards {
    repeated ShardObject shards = 1;
    string kbid = 2;
    int32 actual = 3;
}

message ResourceFieldId {
    string kbid = 1;
    string rid = 2;
    resources.FieldType field_type = 3;
    string field = 4;
}

message IndexResource {
    string kbid = 1;
    string rid = 2;
}

message IndexStatus {

}

message ResourceFieldExistsResponse {
    bool found = 1;
}

message ExportRequest {
    string kbid = 1;
}

service Writer {
    rpc GetKnowledgeBox(knowledgebox.KnowledgeBoxID) returns (knowledgebox.KnowledgeBox) {}
    rpc NewKnowledgeBox(knowledgebox.KnowledgeBoxNew) returns (knowledgebox.NewKnowledgeBoxResponse) {}
    rpc DeleteKnowledgeBox(knowledgebox.KnowledgeBoxID) returns (knowledgebox.DeleteKnowledgeBoxResponse) {}
    rpc UpdateKnowledgeBox(knowledgebox.KnowledgeBoxUpdate) returns (knowledgebox.UpdateKnowledgeBoxResponse) {}
    rpc ListKnowledgeBox(knowledgebox.KnowledgeBoxPrefix) returns (stream knowledgebox.KnowledgeBoxID) {}
    rpc GCKnowledgeBox(knowledgebox.KnowledgeBoxID) returns (knowledgebox.GCKnowledgeBoxResponse) {}

    rpc ResourceFieldExists(ResourceFieldId) returns (ResourceFieldExistsResponse) {}

    rpc ProcessMessage(stream BrokerMessage) returns (OpStatusWriter) {}

    // Labels
    rpc GetLabels(GetLabelsRequest) returns (GetLabelsResponse) {}
    rpc GetLabelSet(GetLabelSetRequest) returns (GetLabelSetResponse) {}
    rpc SetLabels(SetLabelsRequest) returns (OpStatusWriter) {}
    rpc DelLabels(DelLabelsRequest) returns (OpStatusWriter) {}

    // Entities
    rpc GetEntities(GetEntitiesRequest) returns (GetEntitiesResponse) {}
    rpc GetEntitiesGroup(GetEntitiesGroupRequest) returns (GetEntitiesGroupResponse) {}
    rpc SetEntities(SetEntitiesRequest) returns (OpStatusWriter) {}
    rpc DelEntities(DelEntitiesRequest) returns (OpStatusWriter) {}

    // Widgets
    rpc GetWidget(GetWidgetRequest) returns (GetWidgetResponse) {}
    rpc GetWidgets(GetWidgetsRequest) returns (GetWidgetsResponse) {}
    rpc SetWidgets(SetWidgetsRequest) returns (OpStatusWriter) {}
    rpc DelWidgets(DetWidgetsRequest) returns (OpStatusWriter) {}

    rpc Status(WriterStatusRequest) returns (WriterStatusResponse) {}

    rpc ListMembers(ListMembersRequest) returns (ListMembersResponse);

    rpc Index(IndexResource) returns (IndexStatus) {}
    rpc ReIndex(IndexResource) returns (IndexStatus) {}

    rpc Export(ExportRequest) returns (stream BrokerMessage) {}
}
