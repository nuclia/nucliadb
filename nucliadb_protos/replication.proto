syntax = "proto3";

package replication;

import public "nucliadb_protos/noderesources.proto";


message PrimaryShardReplicationState {
    string shard_id = 1;
    // ID to identify the generation of the shard to know
    // if there is a new version of the shard available to download
    string generation_id = 2;
    string kbid = 3;
    optional string similarity = 4 [ deprecated = true ];
    optional bool normalize_vectors = 5 [ deprecated = true ];
    utils.ReleaseChannel release_channel = 6;
}

message SecondaryShardReplicationState {
    string shard_id = 1;
    // ID to identify the generation of the shard to know
    // if there is a new version of the shard available to download
    string generation_id = 2;
}

message SecondaryCheckReplicationStateRequest {
    string secondary_id = 1;
    repeated SecondaryShardReplicationState shard_states = 2;
}

message PrimaryCheckReplicationStateResponse {
    repeated PrimaryShardReplicationState shard_states = 1;
    repeated string shards_to_remove = 2;
    string primary_id = 3;
}

message SegmentIds {
    repeated string items = 1;
}

message ReplicateShardRequest {
    string shard_id = 1;
    map<string, SegmentIds> existing_segment_ids = 2;  // list of existing segment ids so we replicate same shards again
    uint64 chunk_size = 3;
}

message ReplicateShardResponse {
    string generation_id = 1;
    string filepath = 2;
    bytes data = 3;
    uint32 chunk = 4;
    uint64 read_position = 5;
    uint64 total_size = 6;
}

service ReplicationService {
    // Shard replication RPCs
    rpc CheckReplicationState(SecondaryCheckReplicationStateRequest) returns (PrimaryCheckReplicationStateResponse) {}
    rpc ReplicateShard(ReplicateShardRequest) returns (stream ReplicateShardResponse) {}

    rpc GetMetadata(noderesources.EmptyQuery) returns (noderesources.NodeMetadata) {}
}
