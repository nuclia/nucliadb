syntax = "proto3";

package nodewriter;

import public "nucliadb_protos/noderesources.proto";


message OpStatus {
    enum Status {
        OK = 0;
        WARNING = 1;
        ERROR = 2;
    }
    Status status = 1;
    string detail = 2;
    uint64 count = 3;
    uint64 count_paragraphs = 5;
    uint64 count_sentences = 6;
    string shard_id = 4;
}

// Implemented at nucliadb_object_storage

enum TypeMessage {
    CREATION = 0;
    DELETION = 1;
}

message IndexMessage {
    string node = 1;
    string shard = 2;  // physical shard message is for
    uint64 txid = 3;
    string resource = 4;
    TypeMessage typemessage = 5;
    string reindex_id = 6;
    optional string partition = 7;
    string storage_key = 8;
}

message IndexedMessage {
    string node = 1;
    string shard = 2;
    uint64 txid = 3;
    string resource = 4;
    TypeMessage typemessage = 5;
    string reindex_id = 6;
}

message SetGraph {
    noderesources.ShardId shard_id = 1;
    utils.JoinGraph graph = 2;
}

message DeleteGraphNodes {
    noderesources.ShardId shard_id = 2;
    repeated utils.RelationNode nodes = 1;
}

message MoveShardRequest {
    noderesources.ShardId shard_id = 1;
    string address = 2;
}

message AcceptShardRequest {
    noderesources.ShardId shard_id = 1;
    uint32 port = 2;
    bool override_shard = 3;
}

message NewShardRequest {
    utils.VectorSimilarity similarity = 1;
    string kbid = 2;
}

message NewVectorSetRequest {
    noderesources.VectorSetID id = 1;
    utils.VectorSimilarity similarity = 2;
}

service NodeWriter {
    rpc GetShard(noderesources.ShardId) returns (noderesources.ShardId) {}
    rpc NewShard(NewShardRequest) returns (noderesources.ShardCreated) {}
    rpc CleanAndUpgradeShard(noderesources.ShardId) returns (noderesources.ShardCleaned) {}
    rpc DeleteShard(noderesources.ShardId) returns (noderesources.ShardId) {}
    rpc ListShards(noderesources.EmptyQuery) returns (noderesources.ShardIds) {}
    rpc GC(noderesources.ShardId) returns (noderesources.EmptyResponse) {}

    rpc SetResource(noderesources.Resource) returns (OpStatus) {}
    rpc DeleteRelationNodes(DeleteGraphNodes) returns (OpStatus) {}
    rpc JoinGraph(SetGraph) returns (OpStatus) {}
    rpc RemoveResource(noderesources.ResourceID) returns (OpStatus) {}

    rpc AddVectorSet(NewVectorSetRequest) returns (OpStatus) {}  // New
    rpc RemoveVectorSet(noderesources.VectorSetID) returns (OpStatus) {}
    rpc ListVectorSets(noderesources.ShardId) returns (noderesources.VectorSetList) {}

    rpc MoveShard(MoveShardRequest) returns (noderesources.EmptyResponse) {}
    rpc AcceptShard(AcceptShardRequest) returns (noderesources.EmptyResponse) {}

    rpc GetMetadata(noderesources.EmptyQuery) returns (noderesources.NodeMetadata) {}
}
