apiVersion: apps/v1
kind: Deployment
metadata:
  name: nucliadb-worker
  labels:
    app: nucliadb-worker
    version: "{{ .Chart.Version | replace "+" "_" }}"
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.worker.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: nucliadb-worker
      release: "{{ .Release.Name }}"
      heritage: "{{ .Release.Service }}"
  template:
    metadata:
      {{- with .Values.worker.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
      {{- end }}
      name: nucliadb-worker
      labels:
        app: nucliadb-worker
        version: "{{ .Chart.Version | replace "+" "_" }}"
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      topologySpreadConstraints:
{{ toYaml .Values.worker.topologySpreadConstraints | indent 8 }}
      nodeSelector:
{{ toYaml .Values.worker.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.worker.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.worker.tolerations | indent 8 }}
      dnsPolicy: ClusterFirst
      serviceAccountName:  {{ .Values.serviceAccount | default "default" }}
      containers:
      - name: worker
        image: "{{ .Values.image }}:{{ .Values.imageVersion | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /api/v1/health/alive
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 60
          periodSeconds: 60
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /api/v1/health/ready
            port: 8080
          initialDelaySeconds: 1
          timeoutSeconds: 30
          periodSeconds: 30
        command: [
          "nucliadb"
        ]
        env:
          - name: VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['version']
          {{- range $key, $value := .Values.env }}
          - name: "{{ $key }}"
            value: {{ tpl $value $ | toJson }}
          {{- end }}
          {{- if .Values.envSecrets }}
{{ toYaml .Values.envSecrets | indent 10 }}
          {{- end }}
          - name: standalone_node_role
            value: "worker"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        {{- if .Values.envFrom }}
        envFrom:
          {{- toYaml .Values.envFrom | nindent 10 }}
        {{- end }}
        ports:
        - name: http
          containerPort: 8080
        - name: train
          containerPort: 8040
        - name: grpc
          containerPort: 8060
        resources:
{{ toYaml .Values.worker.resources | indent 10 }}
