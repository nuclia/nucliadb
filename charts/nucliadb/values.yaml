# NucliaDB Settings

# Image settings: This allows you to change the image used for the NucliaDB.
# You can use a different image, or a different version of the same image.
imagePullPolicy: IfNotPresent
image: nuclia/nucliadb
imageVersion:

# Defines the number of NucliaDB pods to run.
replicas: 2
podAnnotations: {}

# App settings: These are the settings that are passed to the NucliaDB application via environment variables.
# See https://docs.nuclia.dev/docs/management/nucliadb/configuration for a complete list of settings.
env:
  running_environment: prod
  NUCLIA_ZONE: "europe-1"
  CORS_ORIGINS: '["http://localhost:8080"]'
  #NUA_API_KEY: "..."
  nidx_api_address: nidx:10000
  nidx_searcher_address: nidx:10001
  nidx_indexer_address: nidx:10002
  # when we're k8s, we want structured logs to
  # stdout so they can be scraped by log exporters
  log_output_type: stdout
  log_format_type: structured

# Additional configmaps and secrets to mount into the environment
envFrom:
  # - configMapRef:
  #     name: configMapName
  # - secretRef:
  #     name: secretName

envSecrets:
  # - name: NUA_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: nuclia-api-key
  #       key: api-key

affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []

resources: {}

# Service settings
service:
  # Tune this to have the k8s service expose a different port. By default is 8080
  #   http_port: 80
  http_port: 8080

# Configuration for nucliadb worker
worker:
  replicas: 1
  podAnnotations: {}
  topologySpreadConstraints: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  resources: {}

# Configuration for the index node
nidx:
  image: nuclia/nidx
  imageVersion:
  env: {}
  envSecrets: {}
  envFrom: {}

  replicas: 2
  podAnnotations: {}
  topologySpreadConstraints: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  resources: {}

  worker:
    replicas: 1
    podAnnotations: {}
    topologySpreadConstraints: []
    nodeSelector: {}
    affinity: {}
    tolerations: []
    resources: {}

  scheduler:
    podAnnotations: {}
    topologySpreadConstraints: []
    nodeSelector: {}
    affinity: {}
    tolerations: []
    resources: {}
