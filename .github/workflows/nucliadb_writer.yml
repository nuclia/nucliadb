name: nucliadb Writer (py)

on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_writer.yml"
      - "charts/nucliadb_writer/**"
      - "nucliadb/nucliadb/writer/**"
      - "nucliadb_models/**"
      - "nucliadb/nucliadb/ingest/**"
      - "nucliadb_utils/**"
      - "nucliadb_telemetry/**"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_writer.yml"
      - "charts/nucliadb_writer/**"
      - "nucliadb/nucliadb/writer/**"
      - "nucliadb_models/**"
      - "nucliadb/nucliadb/ingest/**"
      - "nucliadb_utils/**"
      - "nucliadb_telemetry/**"
      - "Dockerfile.writer"

env:
  API_VERSION: 1
  COMPONENT: nucliadb-writer
  CONTAINER_REGISTRY: eu.gcr.io/${{ secrets.PROJECT_ID }}
  IMAGE_NAME: writer

jobs:
  # Job to run pre-checks
  pre-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install package
        run: |
          pip install -r code-requirements.txt

      - name: Run pre-checks
        run: |
          flake8 nucliadb/nucliadb/writer --config=nucliadb/setup.cfg
          isort -c --profile black nucliadb/nucliadb/writer
          black --check --verbose nucliadb/nucliadb/writer

  # Job to run tests
  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install the package
        run: |
          pip install -r test-requirements.txt
          pip install -r nucliadb/requirements-sources.txt
          pip install -r nucliadb/requirements.txt
          pip install -e nucliadb

      - name: Check mypy
        run: |
          MYPYPATH=./mypy_stubs mypy nucliadb/nucliadb/writer/

      - name: Run tests
        run: |
          pytest -rfE --cov=nucliadb.writer -s --tb=native -v --cov-report xml --cov-append nucliadb/nucliadb/writer

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: writer

      - name: Extract docs
        run: |
          mkdir -p /tmp/openapi
          extract-openapi-writer /tmp/openapi/$COMPONENT.json $API_VERSION $GITHUB_SHA

      - uses: actions/upload-artifact@v2
        with:
          name: openapi-${{ env.COMPONENT }}-${{ github.sha }}
          path: /tmp/openapi/

  # PR workflows END here
  # PUSH workflows contine with deploy activities

  # Job to build the docker and push it to registry
  build:
    name: Build image and push
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Calculate short sha
        id: env-vars
        run: |-
          HASH=`git rev-parse --short HEAD`
          BRANCH=${GITHUB_REF##*/}
          echo "::set-output name=short_sha::$HASH"
          echo "::set-output name=branch::$BRANCH"

      - name: Docker - Build
        run: |-
          docker build -t $CONTAINER_REGISTRY/$IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} . -f Dockerfile

      - name: Setup gcloud CLI
        uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Configure GCloud Docker
        run: gcloud auth configure-docker --quiet

      - name: Docker - Tag
        run: |-
          docker tag $CONTAINER_REGISTRY/$IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }} $CONTAINER_REGISTRY/$IMAGE_NAME:${{ steps.env-vars.outputs.branch }}

      - name: Docker - Push sha
        run: |-
          docker push $CONTAINER_REGISTRY/$IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }}

      - name: Docker - Push latest
        run: |-
          docker push $CONTAINER_REGISTRY/$IMAGE_NAME:${{ steps.env-vars.outputs.branch }}

  deploy:
    name: Deploy Helm chart and trigger internal CI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Calculate short sha
        id: env-vars
        run: |-
          HASH=`git rev-parse --short HEAD`
          echo "::set-output name=short_sha::$HASH"

      - name: Set helm package image
        id: version_step
        run: |-
          sed -i.bak "s#IMAGE_TO_REPLACE#$IMAGE_NAME:${{ steps.env-vars.outputs.short_sha }}#" ./charts/nucliadb_writer/values.yaml
          sed -i.bak "s#CONTAINER_REGISTRY_TO_REPLACE#$CONTAINER_REGISTRY#" ./charts/nucliadb_writer/values.yaml
          VERSION=`cat VERSION`
          VERSION_SHA=$VERSION+${{ steps.env-vars.outputs.short_sha }}
          sed -i.bak "s#99999.99999.99999#$VERSION_SHA#" ./charts/nucliadb_writer/Chart.yaml
          echo "::set-output name=version_number::$VERSION_SHA"

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v2.0
        with:
          version: v3.4.0

      - name: Push helm package
        run: |-
          helm lint charts/nucliadb_writer
          helm package charts/nucliadb_writer
          curl --data-binary "@nucliadb_writer-${{ steps.version_step.outputs.version_number }}.tgz" ${{ secrets.HELM_CHART_URL }}/api/charts

      - name: Trigger internal Jenkins
        run: |-
          curl -u "${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_KEY }}" --data-urlencode "NUCLIADB_COMPONENT=writer"  --data-urlencode "VERSION=${{ steps.version_step.outputs.version_number }}" ${{ secrets.JENKINS_WEBHOOK_URL }}

  docs:
    name: "Upload API specs to GCS"
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push'

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: openapi-${{ env.COMPONENT }}-${{ github.sha }}
          path: /tmp/openapi/

      - name: Setup gcloud CLI
        uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Upload docs
        run: |
          gsutil copy /tmp/openapi/$COMPONENT.json gs://stashify-docs/api/regional/v$API_VERSION/$COMPONENT/spec.json
