syntax = "proto3";

package utils;

// Relations are connexions between nodes in the relation index.
// They are tuplets (Source, Relation Type, Relation Label, To).
message Relation {
    enum RelationType {
        CHILD = 0;  // Child resource
        ABOUT = 1;  // related with label (GENERATED)
        ENTITY = 2;  // related with an entity (GENERATED)
        COLAB = 3;  // related with user (GENERATED)
        SYNONYM = 4;  // Synonym relation
        OTHER = 5;  // related with something
    }

    RelationNode source = 6;
    RelationNode to = 7;

    RelationType relation = 5;
    string relation_label = 8;

    RelationMetadata metadata = 9;
}

message RelationMetadata {
    optional string paragraph_id = 1;
    optional int32 source_start = 2;
    optional int32 source_end = 3;
    optional int32 to_start = 4;
    optional int32 to_end = 5;
}

// Nodes are tuplets (Value, Type, Subtype) and they are the main element in the relation index.
message RelationNode {
    enum NodeType {
        ENTITY=0;
        LABEL=1;
        RESOURCE=2;
        USER=3;
    }
    // Value of the node.
    string value = 4;
    // The type of the node.
    NodeType ntype = 5;
    // A node may have a subtype (the string should be empty in case it does not).
    string subtype = 6;
}

message ExtractedText {
    string text = 1;
    map<string, string> split_text = 2;
    repeated string deleted_splits = 3;
}


message Vector {
    int32 start = 1;
    int32 end = 2;
    int32 start_paragraph = 3;
    int32 end_paragraph = 4;
    repeated float vector = 5;
}

message Vectors {
    repeated Vector vectors = 1;
}

message VectorObject {
    Vectors vectors = 1;
    map<string, Vectors> split_vectors = 2;
    repeated string deleted_splits = 3;
}


message UserVector {
    repeated float vector = 1;
    repeated string labels = 2;
    int32 start = 3;
    int32 end = 4;
}

message UserVectors {
    map<string, UserVector> vectors = 1;  // vector's id
}

message UserVectorSet {
    map<string, utils.UserVectors> vectors = 1;  // vectorsets
}

message UserVectorsList {
    repeated string vectors = 1;
}

enum VectorSimilarity {
    COSINE = 0;
    DOT = 1;
}

enum ReleaseChannel {
  STABLE = 0;
  EXPERIMENTAL = 1;
}

message Security {
    repeated string access_groups = 1;
}