name: nucliadb Standalone (py)
env:
  COMPONENT: nucliadb-standalone

on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_standalone.yml"
      - "charts/nucliadb/**"
      - "nucliadb/nucliadb/ingest/**"
      - "nucliadb/nucliadb/writer/**"
      - "nucliadb/nucliadb/standalone/**"
      - "nucliadb/nucliadb/reader/**"
      - "nucliadb/nucliadb/search/**"
      - "nucliadb_models/**"
      - "nucliadb_protos/**"
      - "nucliadb_node/**"
      - "nucliadb_vectors/**"
      - "nucliadb_vectors2/**"
      - "nucliadb_texts/**"
      - "nucliadb_texts2/**"
      - "nucliadb_paragraphs/**"
      - "nucliadb_core/**"
      - "nucliadb_relations/**"
      - 'nucliadb_relations2/**'
  push:
    branches:
      - main
    paths:
      - ".github/workflows/nucliadb_standalone.yml"
      - "charts/nucliadb/**"
      - "nucliadb/nucliadb/ingest/**"
      - "nucliadb/nucliadb/writer/**"
      - "nucliadb/nucliadb/standalone/**"
      - "nucliadb/nucliadb/reader/**"
      - "nucliadb/nucliadb/search/**"
      - "nucliadb_models/**"
      - "nucliadb_protos/**"

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  # Job to run pre-checks
  pre-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install package
        run: make -C nucliadb/ install-dev

      - name: Run pre-checks
        run: make -C nucliadb/ lint-standalone

  # Job to run tests
  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: gcp-auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "${{ secrets.GCP_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.GCP_REGISTRY_SERVICE_ACCOUNT }}"
          token_format: access_token

      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: europe-west4-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install the package
        run: make -C nucliadb/ install-dev

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            node_modified:
              - 'nucliadb_core/**'
              - 'nucliadb_node/src/**'
              - 'nucliadb_paragraphs/**'
              - 'nucliadb_paragraphs2/**'
              - 'nucliadb_procs/**'
              - 'nucliadb_relations/**'
              - 'nucliadb_relations2/**'
              - 'nucliadb_telemetry/**'
              - 'nucliadb_texts/**'
              - 'nucliadb_vectors/**'
              - 'nucliadb_vectors2/**'
            sidecar_modified:
              - 'nucliadb_node/nucliadb_node/**'

      - name: Calc git info
        id: git
        run: |-
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Build local Node for testing
        if: steps.filter.outputs.node_modified == 'true'
        env:
          SECRET_KEY: ${{ secrets.RUST_BUILD_SERVER_SECRET }}
          COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
          BRANCH: ${{ steps.git.outputs.branch }}
        run: |
          make build-node-debug

      - name: Build local Sidecar for testing
        if: steps.filter.outputs.sidecar_modified == 'true'
        run: |
          make build-sidecar

      - name: Run tests
        run: |
          make -C nucliadb/ test-cov-standalone

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: standalone
